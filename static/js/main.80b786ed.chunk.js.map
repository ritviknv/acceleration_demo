{"version":3,"sources":["background.png","background_1.png","background_2.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","states","image_key","coasting","background_0","accelerating_aggressively","background_1","hard_braking","background_2","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","x","y","z","velocity","t0","Date","driving_state","background_image","handleMotion","bind","assertThisInitialized","window","addEventListener","event","acceleration","accel","total_accel","read_image","setState","Math","sqrt","react_default","a","createElement","className","src","alt","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yOCQpCC,SAAS,CAAC,WAAY,4BAA6B,iBACnDC,EAAY,CACdC,SAAWC,IACXC,0BAA6BC,IAC7BC,aAAgBC,KA2EHC,kBAvEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,EAAG,EACHC,EAAM,EACNC,EAAO,EACPC,SAAU,EACVC,GAAI,IAAIC,KACRC,cAAe,OACfC,iBAAmBtB,KAErBO,EAAKgB,aAAehB,EAAKgB,aAAaC,KAAlBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KAXJA,mFAgBhBmB,OAAOC,iBAAiB,eAAejB,KAAKa,mDAGjCK,GACX,IAAMb,EAAIa,EAAMC,aAAad,EACvBC,EAAIY,EAAMC,aAAab,EACvBC,EAAIW,EAAMC,aAAaZ,EACzBa,EAAQpB,KAAKqB,YAAYhB,EAAEC,EAAEC,GAC7BH,EAAQJ,KAAKsB,WAAWF,GACxBhB,GAASJ,KAAKI,MAAMO,eACtBX,KAAKuB,SAAS,CACZX,iBAAkBxB,EAAUgB,yCAItBC,EAAGC,EAAGC,GAChB,OAAOiB,KAAKC,KAAKpB,EAAEA,EAAEC,EAAEA,EAAEC,EAAEA,sCAElBa,GAKT,OAAIA,IAFgB,GAGXjC,EAAO,GAEPiC,GAJQ,IAKRjC,EAAO,GAGPA,EAAO,oCAIhB,OACEuC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEhBH,EAAAC,EAAAC,cAAA,OAAKE,IAAK9B,KAAKI,MAAMQ,iBAAkBiB,UAAU,mBAAmBE,IAAI,kBAvDhEC,aCHEC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80b786ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.5c7b61b1.png\";","module.exports = __webpack_public_path__ + \"static/media/background_1.95114d08.png\";","module.exports = __webpack_public_path__ + \"static/media/background_2.676bd3af.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport background_0 from './background.png';\nimport background_1 from './background_1.png';\nimport background_2 from './background_2.png';\n\nimport './App.css';\n// window.addEventListener(\"deviceorientation\", handleOrientation, true);\nvar states = ['coasting', 'accelerating_aggressively', 'hard_braking']\nvar image_key = {\n  \"coasting\":background_0,\n  \"accelerating_aggressively\" :background_1,\n  \"hard_braking\" :background_2,\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      x :0,\n      y    :0,\n      z     :0,\n      velocity :0, \n      t0: new Date(),\n      driving_state: \"flat\", \n      background_image : background_0\n    }\n    this.handleMotion = this.handleMotion.bind(this)\n\n\n  }\n  componentDidMount(){\n    window.addEventListener('devicemotion',this.handleMotion)\n\n  }\n  handleMotion(event){\n    const x = event.acceleration.x\n    const y = event.acceleration.y\n    const z = event.acceleration.z\n    var accel = this.total_accel(x,y,z)\n    var state = this.read_image(accel)\n    if (state != this.state.driving_state){\n      this.setState({\n        background_image: image_key[state]\n      });\n    }\n  }\n  total_accel(x, y, z){\n    return Math.sqrt(x*x+y*y+z*z)\n  }\n  read_image(accel){\n    // var hard_braking = -5.3936575\n    // var hard_speed = 2.5\n    var hard_braking = -0.2\n    var hard_speed = 1.5\n    if (accel<=hard_braking) {\n      return states[2]\n    }\n    else if (accel>=hard_speed){\n      return states[1]\n    }\n    else {\n      return states[0]\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <img src ={logo} className = \"App-logo\"></img> */}\n          <img src={this.state.background_image} className=\"Background-Image\" alt=\"logo\" />\n        </header>\n      </div>\n    );\n  }\n}\nfunction integrate(){\n  var interval = 1\n  \n}\nfunction live_feed(){\n  var hard_braking = -5.3936575\n\n}\nfunction handleLocationError(message) {\n  window.alert(message)\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}